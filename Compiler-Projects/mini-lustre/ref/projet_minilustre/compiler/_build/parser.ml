type token =
  | AND
  | ARROW
  | BOOL
  | CONST
  | COLON
  | COMMA
  | COMP of (Asttypes.binop)
  | CONST_BOOL of (bool)
  | CONST_INT of (int)
  | CONST_FLOAT of (float)
  | CONST_STRING of (string)
  | ELSE
  | END
  | EOF
  | EQUAL
  | NEQ
  | FBY
  | FLOAT
  | IDENT of (string)
  | IF
  | INT
  | LET
  | LPAREN
  | MERGE
  | MINUS
  | MINUS_DOT
  | NODE
  | NOT
  | OR
  | PLUS
  | PLUS_DOT
  | RETURNS
  | RPAREN
  | SEMICOL
  | SLASH
  | SLASH_DOT
  | STAR
  | STAR_DOT
  | STRING
  | TEL
  | THEN
  | UNIT
  | VAR
  | WHEN

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"

  open Asttypes
  open Ast

  let loc () = symbol_start_pos (), symbol_end_pos ()
  let mk_expr e = { pexpr_desc = e; pexpr_loc = loc () }
  let mk_patt p = { ppatt_desc = p; ppatt_loc = loc () }

# 59 "parser.ml"
let yytransl_const = [|
  257 (* AND *);
  258 (* ARROW *);
  259 (* BOOL *);
  260 (* CONST *);
  261 (* COLON *);
  262 (* COMMA *);
  268 (* ELSE *);
  269 (* END *);
    0 (* EOF *);
  270 (* EQUAL *);
  271 (* NEQ *);
  272 (* FBY *);
  273 (* FLOAT *);
  275 (* IF *);
  276 (* INT *);
  277 (* LET *);
  278 (* LPAREN *);
  279 (* MERGE *);
  280 (* MINUS *);
  281 (* MINUS_DOT *);
  282 (* NODE *);
  283 (* NOT *);
  284 (* OR *);
  285 (* PLUS *);
  286 (* PLUS_DOT *);
  287 (* RETURNS *);
  288 (* RPAREN *);
  289 (* SEMICOL *);
  290 (* SLASH *);
  291 (* SLASH_DOT *);
  292 (* STAR *);
  293 (* STAR_DOT *);
  294 (* STRING *);
  295 (* TEL *);
  296 (* THEN *);
  297 (* UNIT *);
  298 (* VAR *);
  299 (* WHEN *);
    0|]

let yytransl_block = [|
  263 (* COMP *);
  264 (* CONST_BOOL *);
  265 (* CONST_INT *);
  266 (* CONST_FLOAT *);
  267 (* CONST_STRING *);
  274 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\005\000\006\000\
\006\000\008\000\008\000\009\000\009\000\010\000\007\000\007\000\
\013\000\014\000\014\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\015\000\
\015\000\015\000\015\000\015\000\015\000\015\000\015\000\016\000\
\016\000\016\000\016\000\016\000\011\000\011\000\017\000\017\000\
\018\000\018\000\019\000\019\000\019\000\019\000\019\000\019\000\
\019\000\019\000\012\000\012\000\012\000\012\000\012\000\000\000"

let yylen = "\002\000\
\002\000\000\000\002\000\014\000\000\000\001\000\001\000\000\000\
\002\000\001\000\003\000\002\000\003\000\003\000\001\000\002\000\
\004\000\001\000\005\000\003\000\001\000\001\000\004\000\006\000\
\003\000\004\000\004\000\004\000\004\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\002\000\002\000\002\000\005\000\003\000\002\000\
\001\000\001\000\001\000\001\000\003\000\001\000\000\000\001\000\
\003\000\001\000\006\000\006\000\006\000\006\000\005\000\005\000\
\005\000\005\000\001\000\001\000\001\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\072\000\000\000\000\000\000\000\001\000\
\003\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\053\000\000\000\011\000\068\000\070\000\
\069\000\071\000\067\000\014\000\000\000\000\000\007\000\000\000\
\000\000\000\000\000\000\009\000\000\000\000\000\000\000\018\000\
\000\000\000\000\000\000\000\000\013\000\000\000\004\000\016\000\
\000\000\000\000\049\000\050\000\051\000\052\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\048\000\000\000\000\000\000\000\000\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\000\000\
\019\000\000\000\000\000\056\000\000\000\000\000\020\000\000\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\036\000\037\000\034\000\035\000\000\000\
\000\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\057\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\059\000\
\060\000\061\000\062\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\012\000\030\000\035\000\042\000\013\000\
\036\000\014\000\015\000\028\000\043\000\044\000\090\000\063\000\
\091\000\092\000\097\000"

let yysindex = "\002\000\
\247\254\000\000\004\255\000\000\019\000\247\254\023\255\000\000\
\000\000\030\255\040\255\035\255\000\000\029\255\074\255\030\255\
\058\255\030\255\001\255\000\000\049\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\030\255\059\255\000\000\057\255\
\051\255\030\255\076\255\000\000\078\255\240\254\030\255\000\000\
\089\255\079\255\240\254\107\255\000\000\116\255\000\000\000\000\
\161\002\030\255\000\000\000\000\000\000\000\000\104\255\161\002\
\141\002\161\002\161\002\161\002\161\002\216\000\000\000\095\255\
\161\002\241\000\000\000\014\000\016\001\017\255\017\255\000\000\
\161\002\161\002\161\002\161\002\161\002\161\002\161\002\161\002\
\161\002\161\002\000\000\161\002\161\002\161\002\161\002\047\255\
\000\000\041\001\096\255\000\000\161\002\161\002\000\000\065\255\
\000\000\111\002\165\002\165\002\165\002\196\001\017\255\017\255\
\057\002\017\255\017\255\000\000\000\000\000\000\000\000\161\002\
\161\002\161\002\161\002\161\002\000\000\067\001\097\255\129\255\
\133\255\134\255\135\255\196\001\196\001\196\001\196\001\000\000\
\161\002\000\000\161\002\161\002\161\002\161\002\196\001\092\001\
\118\001\144\001\170\001\117\255\117\255\117\255\117\255\000\000\
\000\000\000\000\000\000"

let yyrindex = "\000\000\
\138\000\000\000\000\000\000\000\000\000\138\000\000\000\000\000\
\000\000\108\255\009\255\000\000\000\000\109\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\123\255\000\000\000\000\000\000\000\000\000\000\124\255\000\000\
\000\000\000\000\110\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\080\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\127\255\000\000\000\000\000\000\000\000\046\000\076\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\128\255\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\035\002\222\001\245\001\012\002\028\255\106\000\136\000\
\037\002\166\000\196\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\037\255\066\255\067\002\084\002\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\002\000\000\
\000\000\000\000\000\000\118\255\156\255\194\255\232\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\150\000\000\000\000\000\000\000\000\000\121\000\243\255\
\126\000\237\255\253\255\000\000\000\000\000\000\207\255\000\000\
\000\000\163\255\216\255"

let yytablesize = 970
let yytable = "\062\000\
\119\000\040\000\001\000\023\000\022\000\041\000\066\000\068\000\
\069\000\070\000\071\000\072\000\020\000\054\000\037\000\031\000\
\003\000\024\000\008\000\037\000\025\000\007\000\128\000\098\000\
\099\000\100\000\101\000\102\000\103\000\104\000\105\000\106\000\
\107\000\025\000\108\000\109\000\110\000\111\000\026\000\025\000\
\054\000\027\000\026\000\118\000\010\000\016\000\064\000\011\000\
\026\000\025\000\084\000\085\000\086\000\087\000\112\000\113\000\
\114\000\115\000\026\000\025\000\025\000\018\000\124\000\125\000\
\126\000\127\000\017\000\025\000\026\000\026\000\029\000\027\000\
\120\000\121\000\122\000\123\000\026\000\027\000\019\000\135\000\
\022\000\136\000\137\000\138\000\139\000\022\000\022\000\027\000\
\021\000\033\000\032\000\022\000\034\000\022\000\022\000\022\000\
\038\000\027\000\027\000\144\000\145\000\146\000\147\000\022\000\
\022\000\027\000\046\000\022\000\022\000\022\000\039\000\022\000\
\022\000\022\000\022\000\022\000\022\000\047\000\063\000\022\000\
\049\000\050\000\022\000\063\000\063\000\065\000\089\000\117\000\
\130\000\063\000\131\000\063\000\063\000\063\000\132\000\133\000\
\134\000\002\000\096\000\005\000\010\000\063\000\063\000\008\000\
\012\000\063\000\063\000\063\000\015\000\063\000\063\000\063\000\
\063\000\063\000\063\000\009\000\064\000\063\000\055\000\058\000\
\063\000\064\000\064\000\048\000\045\000\000\000\000\000\064\000\
\000\000\064\000\064\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\064\000\064\000\000\000\000\000\064\000\
\064\000\064\000\000\000\064\000\064\000\064\000\064\000\064\000\
\064\000\000\000\065\000\064\000\000\000\000\000\064\000\065\000\
\065\000\000\000\000\000\000\000\000\000\065\000\000\000\065\000\
\065\000\065\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\065\000\065\000\000\000\000\000\065\000\065\000\065\000\
\000\000\065\000\065\000\065\000\065\000\065\000\065\000\000\000\
\066\000\065\000\000\000\000\000\065\000\066\000\066\000\000\000\
\000\000\000\000\000\000\066\000\000\000\066\000\066\000\066\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\066\000\
\066\000\000\000\000\000\066\000\066\000\066\000\000\000\066\000\
\066\000\066\000\066\000\066\000\066\000\000\000\073\000\066\000\
\000\000\000\000\066\000\094\000\074\000\000\000\000\000\000\000\
\000\000\000\000\000\000\075\000\076\000\077\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\079\000\000\000\
\000\000\080\000\081\000\082\000\000\000\095\000\043\000\084\000\
\085\000\086\000\087\000\043\000\043\000\000\000\000\000\000\000\
\088\000\043\000\000\000\043\000\043\000\043\000\000\000\000\000\
\000\000\000\000\000\000\043\000\000\000\043\000\043\000\000\000\
\000\000\043\000\043\000\043\000\044\000\043\000\043\000\000\000\
\000\000\044\000\044\000\000\000\000\000\043\000\000\000\044\000\
\043\000\044\000\044\000\044\000\000\000\000\000\000\000\000\000\
\000\000\044\000\000\000\044\000\044\000\000\000\000\000\044\000\
\044\000\044\000\032\000\044\000\044\000\000\000\000\000\032\000\
\032\000\000\000\000\000\044\000\000\000\032\000\044\000\032\000\
\032\000\032\000\000\000\000\000\000\000\000\000\000\000\032\000\
\000\000\032\000\032\000\000\000\000\000\032\000\032\000\032\000\
\033\000\032\000\032\000\000\000\000\000\033\000\033\000\000\000\
\000\000\032\000\000\000\033\000\032\000\033\000\033\000\033\000\
\000\000\000\000\000\000\000\000\000\000\033\000\000\000\033\000\
\033\000\000\000\000\000\033\000\033\000\033\000\030\000\033\000\
\033\000\000\000\000\000\030\000\030\000\000\000\000\000\033\000\
\000\000\030\000\033\000\030\000\030\000\030\000\000\000\000\000\
\000\000\000\000\000\000\030\000\000\000\030\000\030\000\000\000\
\000\000\030\000\030\000\030\000\031\000\030\000\030\000\000\000\
\000\000\031\000\031\000\000\000\000\000\030\000\000\000\031\000\
\030\000\031\000\031\000\031\000\000\000\000\000\000\000\000\000\
\073\000\031\000\000\000\031\000\031\000\000\000\074\000\031\000\
\031\000\031\000\000\000\031\000\031\000\075\000\076\000\077\000\
\000\000\000\000\000\000\031\000\000\000\000\000\031\000\078\000\
\079\000\073\000\000\000\080\000\081\000\082\000\000\000\074\000\
\083\000\084\000\085\000\086\000\087\000\000\000\075\000\076\000\
\077\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\000\000\000\000\080\000\081\000\082\000\000\000\
\073\000\000\000\084\000\085\000\086\000\087\000\074\000\000\000\
\093\000\000\000\000\000\088\000\000\000\075\000\076\000\077\000\
\000\000\000\000\000\000\000\000\000\000\096\000\000\000\078\000\
\079\000\073\000\000\000\080\000\081\000\082\000\116\000\074\000\
\000\000\084\000\085\000\086\000\087\000\000\000\075\000\076\000\
\077\000\000\000\088\000\000\000\000\000\000\000\000\000\000\000\
\078\000\079\000\000\000\073\000\080\000\081\000\082\000\000\000\
\000\000\074\000\084\000\085\000\086\000\087\000\129\000\000\000\
\075\000\076\000\077\000\088\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\079\000\073\000\000\000\080\000\081\000\
\082\000\000\000\074\000\000\000\084\000\085\000\086\000\087\000\
\000\000\075\000\076\000\077\000\000\000\088\000\000\000\000\000\
\000\000\000\000\000\000\078\000\079\000\000\000\073\000\080\000\
\081\000\082\000\000\000\140\000\074\000\084\000\085\000\086\000\
\087\000\000\000\000\000\075\000\076\000\077\000\088\000\000\000\
\000\000\000\000\000\000\000\000\000\000\078\000\079\000\000\000\
\073\000\080\000\081\000\082\000\000\000\141\000\074\000\084\000\
\085\000\086\000\087\000\000\000\000\000\075\000\076\000\077\000\
\088\000\000\000\000\000\000\000\000\000\000\000\000\000\078\000\
\079\000\000\000\073\000\080\000\081\000\082\000\000\000\142\000\
\074\000\084\000\085\000\086\000\087\000\000\000\000\000\075\000\
\076\000\077\000\088\000\000\000\000\000\000\000\000\000\000\000\
\000\000\078\000\079\000\000\000\073\000\080\000\081\000\082\000\
\000\000\143\000\074\000\084\000\085\000\086\000\087\000\000\000\
\000\000\075\000\076\000\077\000\088\000\000\000\000\000\000\000\
\000\000\000\000\000\000\078\000\079\000\000\000\038\000\080\000\
\081\000\082\000\000\000\038\000\038\000\084\000\085\000\086\000\
\087\000\038\000\000\000\038\000\038\000\038\000\088\000\000\000\
\000\000\000\000\000\000\038\000\000\000\039\000\000\000\000\000\
\000\000\038\000\039\000\039\000\000\000\038\000\038\000\000\000\
\039\000\000\000\039\000\039\000\039\000\038\000\000\000\000\000\
\038\000\000\000\039\000\000\000\040\000\000\000\000\000\000\000\
\039\000\040\000\040\000\000\000\039\000\039\000\000\000\040\000\
\000\000\040\000\040\000\040\000\039\000\000\000\000\000\039\000\
\000\000\040\000\000\000\041\000\000\000\000\000\000\000\040\000\
\041\000\000\000\042\000\040\000\040\000\000\000\041\000\000\000\
\042\000\000\000\041\000\040\000\042\000\000\000\040\000\000\000\
\041\000\073\000\042\000\000\000\000\000\000\000\041\000\074\000\
\042\000\000\000\041\000\041\000\042\000\042\000\075\000\076\000\
\028\000\000\000\041\000\000\000\042\000\041\000\028\000\042\000\
\078\000\079\000\000\000\000\000\000\000\081\000\082\000\000\000\
\028\000\029\000\084\000\085\000\086\000\087\000\024\000\029\000\
\000\000\000\000\028\000\028\000\024\000\000\000\000\000\000\000\
\000\000\029\000\028\000\000\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\029\000\029\000\074\000\000\000\000\000\
\024\000\024\000\000\000\029\000\075\000\076\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\000\000\078\000\079\000\
\000\000\000\000\000\000\081\000\082\000\000\000\000\000\000\000\
\084\000\085\000\086\000\087\000\051\000\052\000\053\000\054\000\
\000\000\000\000\000\000\000\000\000\000\000\000\055\000\056\000\
\000\000\000\000\057\000\058\000\059\000\060\000\000\000\061\000\
\051\000\052\000\053\000\054\000\067\000\000\000\000\000\000\000\
\000\000\000\000\055\000\056\000\000\000\000\000\057\000\058\000\
\059\000\060\000\000\000\061\000\078\000\079\000\000\000\000\000\
\000\000\081\000\082\000\000\000\000\000\000\000\084\000\085\000\
\086\000\087\000"

let yycheck = "\049\000\
\094\000\018\001\001\000\003\001\018\000\022\001\056\000\057\000\
\058\000\059\000\060\000\061\000\016\000\005\001\034\000\029\000\
\026\001\017\001\000\000\039\000\020\001\018\001\116\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\006\001\084\000\085\000\086\000\087\000\038\001\012\001\
\032\001\041\001\006\001\093\000\022\001\006\001\050\000\018\001\
\012\001\022\001\034\001\035\001\036\001\037\001\008\001\009\001\
\010\001\011\001\022\001\032\001\033\001\033\001\112\000\113\000\
\114\000\115\000\032\001\040\001\032\001\033\001\022\001\006\001\
\008\001\009\001\010\001\011\001\040\001\012\001\005\001\129\000\
\001\001\131\000\132\000\133\000\134\000\006\001\007\001\022\001\
\031\001\033\001\032\001\012\001\042\001\014\001\015\001\016\001\
\021\001\032\001\033\001\140\000\141\000\142\000\143\000\024\001\
\025\001\040\001\018\001\028\001\029\001\030\001\033\001\032\001\
\033\001\034\001\035\001\036\001\037\001\039\001\001\001\040\001\
\014\001\006\001\043\001\006\001\007\001\022\001\032\001\032\001\
\032\001\012\001\002\001\014\001\015\001\016\001\002\001\002\001\
\002\001\000\000\022\001\032\001\032\001\024\001\025\001\021\001\
\021\001\028\001\029\001\030\001\039\001\032\001\033\001\034\001\
\035\001\036\001\037\001\006\000\001\001\040\001\032\001\032\001\
\043\001\006\001\007\001\043\000\039\000\255\255\255\255\012\001\
\255\255\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\255\255\255\255\028\001\
\029\001\030\001\255\255\032\001\033\001\034\001\035\001\036\001\
\037\001\255\255\001\001\040\001\255\255\255\255\043\001\006\001\
\007\001\255\255\255\255\255\255\255\255\012\001\255\255\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\255\255\255\255\028\001\029\001\030\001\
\255\255\032\001\033\001\034\001\035\001\036\001\037\001\255\255\
\001\001\040\001\255\255\255\255\043\001\006\001\007\001\255\255\
\255\255\255\255\255\255\012\001\255\255\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\025\001\255\255\255\255\028\001\029\001\030\001\255\255\032\001\
\033\001\034\001\035\001\036\001\037\001\255\255\001\001\040\001\
\255\255\255\255\043\001\006\001\007\001\255\255\255\255\255\255\
\255\255\255\255\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\255\255\
\255\255\028\001\029\001\030\001\255\255\032\001\001\001\034\001\
\035\001\036\001\037\001\006\001\007\001\255\255\255\255\255\255\
\043\001\012\001\255\255\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\024\001\025\001\255\255\
\255\255\028\001\029\001\030\001\001\001\032\001\033\001\255\255\
\255\255\006\001\007\001\255\255\255\255\040\001\255\255\012\001\
\043\001\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\255\255\022\001\255\255\024\001\025\001\255\255\255\255\028\001\
\029\001\030\001\001\001\032\001\033\001\255\255\255\255\006\001\
\007\001\255\255\255\255\040\001\255\255\012\001\043\001\014\001\
\015\001\016\001\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\024\001\025\001\255\255\255\255\028\001\029\001\030\001\
\001\001\032\001\033\001\255\255\255\255\006\001\007\001\255\255\
\255\255\040\001\255\255\012\001\043\001\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\024\001\
\025\001\255\255\255\255\028\001\029\001\030\001\001\001\032\001\
\033\001\255\255\255\255\006\001\007\001\255\255\255\255\040\001\
\255\255\012\001\043\001\014\001\015\001\016\001\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\024\001\025\001\255\255\
\255\255\028\001\029\001\030\001\001\001\032\001\033\001\255\255\
\255\255\006\001\007\001\255\255\255\255\040\001\255\255\012\001\
\043\001\014\001\015\001\016\001\255\255\255\255\255\255\255\255\
\001\001\022\001\255\255\024\001\025\001\255\255\007\001\028\001\
\029\001\030\001\255\255\032\001\033\001\014\001\015\001\016\001\
\255\255\255\255\255\255\040\001\255\255\255\255\043\001\024\001\
\025\001\001\001\255\255\028\001\029\001\030\001\255\255\007\001\
\033\001\034\001\035\001\036\001\037\001\255\255\014\001\015\001\
\016\001\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\255\255\028\001\029\001\030\001\255\255\
\001\001\255\255\034\001\035\001\036\001\037\001\007\001\255\255\
\040\001\255\255\255\255\043\001\255\255\014\001\015\001\016\001\
\255\255\255\255\255\255\255\255\255\255\022\001\255\255\024\001\
\025\001\001\001\255\255\028\001\029\001\030\001\006\001\007\001\
\255\255\034\001\035\001\036\001\037\001\255\255\014\001\015\001\
\016\001\255\255\043\001\255\255\255\255\255\255\255\255\255\255\
\024\001\025\001\255\255\001\001\028\001\029\001\030\001\255\255\
\255\255\007\001\034\001\035\001\036\001\037\001\012\001\255\255\
\014\001\015\001\016\001\043\001\255\255\255\255\255\255\255\255\
\255\255\255\255\024\001\025\001\001\001\255\255\028\001\029\001\
\030\001\255\255\007\001\255\255\034\001\035\001\036\001\037\001\
\255\255\014\001\015\001\016\001\255\255\043\001\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\255\255\001\001\028\001\
\029\001\030\001\255\255\032\001\007\001\034\001\035\001\036\001\
\037\001\255\255\255\255\014\001\015\001\016\001\043\001\255\255\
\255\255\255\255\255\255\255\255\255\255\024\001\025\001\255\255\
\001\001\028\001\029\001\030\001\255\255\032\001\007\001\034\001\
\035\001\036\001\037\001\255\255\255\255\014\001\015\001\016\001\
\043\001\255\255\255\255\255\255\255\255\255\255\255\255\024\001\
\025\001\255\255\001\001\028\001\029\001\030\001\255\255\032\001\
\007\001\034\001\035\001\036\001\037\001\255\255\255\255\014\001\
\015\001\016\001\043\001\255\255\255\255\255\255\255\255\255\255\
\255\255\024\001\025\001\255\255\001\001\028\001\029\001\030\001\
\255\255\032\001\007\001\034\001\035\001\036\001\037\001\255\255\
\255\255\014\001\015\001\016\001\043\001\255\255\255\255\255\255\
\255\255\255\255\255\255\024\001\025\001\255\255\001\001\028\001\
\029\001\030\001\255\255\006\001\007\001\034\001\035\001\036\001\
\037\001\012\001\255\255\014\001\015\001\016\001\043\001\255\255\
\255\255\255\255\255\255\022\001\255\255\001\001\255\255\255\255\
\255\255\028\001\006\001\007\001\255\255\032\001\033\001\255\255\
\012\001\255\255\014\001\015\001\016\001\040\001\255\255\255\255\
\043\001\255\255\022\001\255\255\001\001\255\255\255\255\255\255\
\028\001\006\001\007\001\255\255\032\001\033\001\255\255\012\001\
\255\255\014\001\015\001\016\001\040\001\255\255\255\255\043\001\
\255\255\022\001\255\255\001\001\255\255\255\255\255\255\028\001\
\006\001\255\255\006\001\032\001\033\001\255\255\012\001\255\255\
\012\001\255\255\016\001\040\001\016\001\255\255\043\001\255\255\
\022\001\001\001\022\001\255\255\255\255\255\255\028\001\007\001\
\028\001\255\255\032\001\033\001\032\001\033\001\014\001\015\001\
\006\001\255\255\040\001\255\255\040\001\043\001\012\001\043\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\022\001\006\001\034\001\035\001\036\001\037\001\006\001\012\001\
\255\255\255\255\032\001\033\001\012\001\255\255\255\255\255\255\
\255\255\022\001\040\001\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\032\001\033\001\007\001\255\255\255\255\
\032\001\033\001\255\255\040\001\014\001\015\001\255\255\255\255\
\040\001\255\255\255\255\255\255\255\255\255\255\024\001\025\001\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\034\001\035\001\036\001\037\001\008\001\009\001\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\255\255\018\001\019\001\
\255\255\255\255\022\001\023\001\024\001\025\001\255\255\027\001\
\008\001\009\001\010\001\011\001\032\001\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\255\255\255\255\022\001\023\001\
\024\001\025\001\255\255\027\001\024\001\025\001\255\255\255\255\
\255\255\029\001\030\001\255\255\255\255\255\255\034\001\035\001\
\036\001\037\001"

let yynames_const = "\
  AND\000\
  ARROW\000\
  BOOL\000\
  CONST\000\
  COLON\000\
  COMMA\000\
  ELSE\000\
  END\000\
  EOF\000\
  EQUAL\000\
  NEQ\000\
  FBY\000\
  FLOAT\000\
  IF\000\
  INT\000\
  LET\000\
  LPAREN\000\
  MERGE\000\
  MINUS\000\
  MINUS_DOT\000\
  NODE\000\
  NOT\000\
  OR\000\
  PLUS\000\
  PLUS_DOT\000\
  RETURNS\000\
  RPAREN\000\
  SEMICOL\000\
  SLASH\000\
  SLASH_DOT\000\
  STAR\000\
  STAR_DOT\000\
  STRING\000\
  TEL\000\
  THEN\000\
  UNIT\000\
  VAR\000\
  WHEN\000\
  "

let yynames_block = "\
  COMP\000\
  CONST_BOOL\000\
  CONST_INT\000\
  CONST_FLOAT\000\
  CONST_STRING\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'node_decs) in
    Obj.repr(
# 79 "parser.mly"
                    ( _1 )
# 511 "parser.ml"
               : Ast.p_file))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "parser.mly"
                    ( [] )
# 517 "parser.ml"
               : 'node_decs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'node) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'node_decs) in
    Obj.repr(
# 84 "parser.mly"
                    ( _1 :: _2 )
# 525 "parser.ml"
               : 'node_decs))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 12 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 10 : 'in_params) in
    let _8 = (Parsing.peek_val __caml_parser_env 6 : 'out_params) in
    let _11 = (Parsing.peek_val __caml_parser_env 3 : 'local_params) in
    let _13 = (Parsing.peek_val __caml_parser_env 1 : 'eq_list) in
    Obj.repr(
# 93 "parser.mly"
    ( { pn_name = _2;
	pn_input = _4;
	pn_output = _8;
	pn_local = _11;
	pn_equs = _13;
	pn_loc = loc(); } )
# 541 "parser.ml"
               : 'node))
; (fun __caml_parser_env ->
    Obj.repr(
# 103 "parser.mly"
    ( [] )
# 547 "parser.ml"
               : 'in_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 105 "parser.mly"
    ( _1 )
# 554 "parser.ml"
               : 'in_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 111 "parser.mly"
    ( _1 )
# 561 "parser.ml"
               : 'out_params))
; (fun __caml_parser_env ->
    Obj.repr(
# 116 "parser.mly"
    ( [] )
# 567 "parser.ml"
               : 'local_params))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'param_list_semicol) in
    Obj.repr(
# 118 "parser.mly"
    ( _2 )
# 574 "parser.ml"
               : 'local_params))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'param) in
    Obj.repr(
# 123 "parser.mly"
    ( _1 )
# 581 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_list) in
    Obj.repr(
# 125 "parser.mly"
    ( _1 @ _3 )
# 589 "parser.ml"
               : 'param_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'param) in
    Obj.repr(
# 130 "parser.mly"
    ( _1 )
# 596 "parser.ml"
               : 'param_list_semicol))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'param) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'param_list_semicol) in
    Obj.repr(
# 132 "parser.mly"
    ( _1 @ _3 )
# 604 "parser.ml"
               : 'param_list_semicol))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ident_comma_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 138 "parser.mly"
      ( let typ = _3 in
        List.map (fun id -> (id, typ)) _1 )
# 613 "parser.ml"
               : 'param))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'eq) in
    Obj.repr(
# 144 "parser.mly"
    ( [_1] )
# 620 "parser.ml"
               : 'eq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'eq) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'eq_list) in
    Obj.repr(
# 146 "parser.mly"
    ( _1 :: _2 )
# 628 "parser.ml"
               : 'eq_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 151 "parser.mly"
    ( { peq_patt = _1; peq_expr = _3; } )
# 636 "parser.ml"
               : 'eq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 156 "parser.mly"
    ( mk_patt (PP_ident _1) )
# 643 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'ident_comma_list) in
    Obj.repr(
# 158 "parser.mly"
    ( mk_patt (PP_tuple(_2::_4)) )
# 651 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 163 "parser.mly"
    ( _2 )
# 658 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'const) in
    Obj.repr(
# 165 "parser.mly"
    ( _1 )
# 665 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 167 "parser.mly"
    ( mk_expr (PE_ident _1))
# 672 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr_comma_list_empty) in
    Obj.repr(
# 169 "parser.mly"
    ( mk_expr (PE_app (_1, _3)))
# 680 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "parser.mly"
    ( mk_expr (PE_if (_2, _4, _6)) )
# 689 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "parser.mly"
    ( mk_expr (PE_fby (_1, _3)) )
# 697 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "parser.mly"
    ( mk_expr (PE_when (_1, (Cbool _3), _4)) )
# 706 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "parser.mly"
    ( mk_expr (PE_when (_1, (Cint _3), _4)) )
# 715 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : float) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 179 "parser.mly"
    ( mk_expr (PE_when (_1, (Cfloat _3), _4)) )
# 724 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 181 "parser.mly"
    ( mk_expr (PE_when (_1, (Cstring _3), _4)) )
# 733 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 183 "parser.mly"
    ( mk_expr (PE_binop (Badd, _1, _3)) )
# 741 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 185 "parser.mly"
    ( mk_expr (PE_binop (Badd_f, _1, _3)) )
# 749 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 187 "parser.mly"
    ( mk_expr (PE_binop (Bsub, _1, _3)) )
# 757 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 189 "parser.mly"
    ( mk_expr (PE_binop (Bsub_f, _1, _3)) )
# 765 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 191 "parser.mly"
    ( mk_expr (PE_binop (Bmul, _1, _3)) )
# 773 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 193 "parser.mly"
    ( mk_expr (PE_binop (Bmul_f, _1, _3)) )
# 781 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 195 "parser.mly"
    ( mk_expr (PE_binop (Bdiv, _1, _3)) )
# 789 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 197 "parser.mly"
    ( mk_expr (PE_binop (Bdiv_f, _1, _3)) )
# 797 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Asttypes.binop) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 199 "parser.mly"
    ( mk_expr (PE_binop (_2, _1, _3)) )
# 806 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 201 "parser.mly"
    ( mk_expr (PE_binop (Beq, _1, _3)) )
# 814 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 203 "parser.mly"
    ( mk_expr (PE_binop (Bneq, _1, _3)) )
# 822 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 205 "parser.mly"
    ( mk_expr (PE_binop (Band, _1, _3)) )
# 830 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 207 "parser.mly"
    ( mk_expr (PE_binop (Bor, _1, _3)) )
# 838 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 209 "parser.mly"
    ( mk_expr (PE_unop (Uminus, _2)) )
# 845 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 211 "parser.mly"
    ( mk_expr (PE_unop (Uminus_f, _2)) )
# 852 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 213 "parser.mly"
    ( mk_expr (PE_unop (Unot, _2)) )
# 859 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr_comma_list) in
    Obj.repr(
# 215 "parser.mly"
    ( mk_expr (PE_tuple (_2::_4)) )
# 867 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'lparen_const_arrow_expr_rparen_list) in
    Obj.repr(
# 217 "parser.mly"
    ( mk_expr (PE_merge ( _2, _3)) )
# 875 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 222 "parser.mly"
    ( mk_expr (PE_const Cunit) )
# 881 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 224 "parser.mly"
    ( mk_expr (PE_const (Cbool _1)) )
# 888 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 226 "parser.mly"
    ( mk_expr (PE_const (Cint _1)) )
# 895 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 228 "parser.mly"
    ( mk_expr (PE_const (Cfloat _1)) )
# 902 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 230 "parser.mly"
    ( mk_expr (PE_const (Cstring _1)) )
# 909 "parser.ml"
               : 'const))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'ident_comma_list) in
    Obj.repr(
# 235 "parser.mly"
    ( _1 :: _3 )
# 917 "parser.ml"
               : 'ident_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 236 "parser.mly"
        ( [_1] )
# 924 "parser.ml"
               : 'ident_comma_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "parser.mly"
    ( [] )
# 930 "parser.ml"
               : 'expr_comma_list_empty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 241 "parser.mly"
                  ( _1 )
# 937 "parser.ml"
               : 'expr_comma_list_empty))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr_comma_list) in
    Obj.repr(
# 246 "parser.mly"
    ( _1 :: _3 )
# 945 "parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 247 "parser.mly"
       ( [_1] )
# 952 "parser.ml"
               : 'expr_comma_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lparen_const_arrow_expr_rparen_list) in
    Obj.repr(
# 252 "parser.mly"
    ( (Cbool _2, _4) :: _6 )
# 961 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lparen_const_arrow_expr_rparen_list) in
    Obj.repr(
# 254 "parser.mly"
    ( (Cint _2, _4) :: _6 )
# 970 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : float) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lparen_const_arrow_expr_rparen_list) in
    Obj.repr(
# 256 "parser.mly"
    ( (Cfloat _2, _4) :: _6 )
# 979 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'lparen_const_arrow_expr_rparen_list) in
    Obj.repr(
# 258 "parser.mly"
    ( (Cstring _2, _4) :: _6 )
# 988 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : bool) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 259 "parser.mly"
                                      ([(Cbool _2, _4)])
# 996 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : int) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 260 "parser.mly"
                                     ([(Cint _2, _4)])
# 1004 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : float) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 261 "parser.mly"
                                       ([(Cfloat _2, _4)])
# 1012 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 262 "parser.mly"
                                        ([(Cstring _2, _4)])
# 1020 "parser.ml"
               : 'lparen_const_arrow_expr_rparen_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 266 "parser.mly"
         ( Tunit )
# 1026 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 267 "parser.mly"
         ( Tbool )
# 1032 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 268 "parser.mly"
         ( Tint )
# 1038 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 269 "parser.mly"
         ( Tfloat )
# 1044 "parser.ml"
               : 'typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 270 "parser.mly"
         ( Tstring )
# 1050 "parser.ml"
               : 'typ))
(* Entry file *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let file (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.p_file)
